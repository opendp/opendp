{
    "measurement_invoke": {
        "description": "Invoke the `measurement` with `arg`. Returns a differentially private release.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "Measurement to invoke."
            },
            {
                "name": "arg",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "measurement_input_carrier_type",
                    "params": [
                        "measurement"
                    ]
                },
                "description": "Input data to supply to the measurement. A member of the measurement's input domain."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyObject *>",
            "description": "Differentially private release."
        }
    },
    "transformation_invoke": {
        "description": "Invoke the `transformation` with `arg`. \nThe response is not differentially private as it has not been chained with a measurement.",
        "args": [
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "Transformation to invoke."
            },
            {
                "name": "arg",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "transformation_input_carrier_type",
                    "params": [
                        "transformation"
                    ]
                },
                "description": "Input data to supply to the measurement. A member of the transformations's input domain."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyObject *>",
            "description": "Non-differentially private answer to the query."
        }
    },
    "transformation_check": {
        "description": "Check the stability relation of the `transformation` at the given `d_in`, `d_out`.",
        "args": [
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "Transformation to check the stability relation of."
            },
            {
                "name": "d_in",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "transformation_input_distance_type",
                    "params": [
                        "transformation"
                    ]
                },
                "description": "Distance in terms of the input metric."
            },
            {
                "name": "d_out",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "transformation_output_distance_type",
                    "params": [
                        "transformation"
                    ]
                },
                "description": "Distance in terms of the output metric."
            }
        ],
        "ret": {
            "c_type": "FfiResult<bool *>",
            "hint": "bool",
            "description": "True indicates that the relation passed at the given distance."
        }
    },
    "measurement_check": {
        "description": "Check the privacy relation of the `measurement` at the given `d_in`, `d_out`.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "Measurement to check the privacy relation of."
            },
            {
                "name": "d_in",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "measurement_input_distance_type",
                    "params": [
                        "measurement"
                    ]
                },
                "description": "Distance in terms of the input metric."
            },
            {
                "name": "d_out",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "measurement_output_distance_type",
                    "params": [
                        "measurement"
                    ]
                },
                "description": "Distance in terms of the output measure."
            }
        ],
        "ret": {
            "c_type": "FfiResult<bool *>",
            "hint": "bool",
            "description": "True indicates that the relation passed at the given distance."
        }
    },
    "transformation_input_carrier_type": {
        "description": "Get the input (carrier) data type of `transformation`.",
        "args": [
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "The transformation to retrieve the type from."
            }
        ],
        "ret": {
            "c_type": "FfiResult<const char *>"
        }
    },
    "measurement_input_carrier_type": {
        "description": "Get the input (carrier) data type of `measurement`.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "The measurement to retrieve the type from."
            }
        ],
        "ret": {
            "c_type": "FfiResult<const char *>"
        }
    },
    "transformation_input_distance_type": {
        "description": "Get the input distance type of `transformation`.",
        "args": [
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "The transformation to retrieve the type from."
            }
        ],
        "ret": {
            "c_type": "FfiResult<const char *>"
        }
    },
    "transformation_output_distance_type": {
        "description": "Get the output distance type of `transformation`.",
        "args": [
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "The transformation to retrieve the type from."
            }
        ],
        "ret": {
            "c_type": "FfiResult<const char *>"
        }
    },
    "measurement_input_distance_type": {
        "description": "Get the input distance type of `measurement`.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "The measurement to retrieve the type from."
            }
        ],
        "ret": {
            "c_type": "FfiResult<const char *>"
        }
    },
    "measurement_output_distance_type": {
        "description": "Get the output distance type of `measurement`.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "The measurement to retrieve the type from."
            }
        ],
        "ret": {
            "c_type": "FfiResult<const char *>"
        }
    },
    "_error_free": {
        "description": "Internal function. Free the memory associated with `error`.",
        "args": [
            {
                "name": "error",
                "c_type": "const FfiError *",
                "hint": "FfiError",
                "do_not_convert": true
            }
        ],
        "ret": {
            "c_type": "bool",
            "description": "true indicates successful free"
        }
    },
    "_transformation_free": {
        "description": "Internal function. Free the memory associated with `transformation`.",
        "args": [
            {
                "name": "transformation",
                "c_type": "AnyTransformation *",
                "do_not_convert": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<void *>"
        }
    },
    "_measurement_free": {
        "description": "Internal function. Free the memory associated with `measurement`.",
        "args": [
            {
                "name": "measurement",
                "c_type": "AnyMeasurement *",
                "do_not_convert": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<void *>"
        }
    }
}
