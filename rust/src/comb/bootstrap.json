{
    "make_chain_mt": {
        "description": "Construct the functional composition (`measurement` ○ `transformation`). Returns a Measurement.",
        "features": ["contrib"],
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "outer privatizer"
            },
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "inner query"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "Measurement representing the chained computation."
        }
    },
    "make_chain_tt": {
        "description": "Construct the functional composition (`transformation1` ○ `transformation0`). Returns a Tranformation.",
        "features": ["contrib"],
        "args": [
            {
                "name": "transformation1",
                "c_type": "const AnyTransformation *",
                "description": "outer transformation"
            },
            {
                "name": "transformation0",
                "c_type": "const AnyTransformation *",
                "description": "inner transformation"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>",
            "description": "Transformation representing the chained computation."
        }
    },
    "make_basic_composition": {
        "description": "Construct the DP composition (`measurement0`, `measurement1`). Returns a Measurement.",
        "features": ["contrib"],
        "args": [
            {
                "name": "measurement0",
                "c_type": "const AnyMeasurement *",
                "description": "The left member of the resulting 2-tuple."
            },
            {
                "name": "measurement1",
                "c_type": "const AnyMeasurement *",
                "description": "The right member of the resulting 2-tuple."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "Measurement representing the composed transformations."
        }
    },
    "make_population_amplification": {
        "description": "Construct an amplified measurement from a `measurement` with privacy amplification by subsampling.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "The measurement to amplify."
            },
            {
                "name": "population_size",
                "c_type": "unsigned int",
                "description": "Number of records in population."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "New measurement with the same function, but an adjusted privacy map."
        }
    },
    "make_fix_delta": {
        "description": "Fix the delta parameter in the privacy map of a `measurement` with a SmoothedMaxDivergence output measure.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "The measurement with a privacy curve to be fixed."
            },
            {
                "name": "delta",
                "c_type": "const AnyObject *",
                "rust_type": {
                    "function": "get_atom",
                    "params": [
                        {
                            "function": "measurement_output_distance_type",
                            "params": [
                                "measurement"
                            ]
                        }
                    ]
                },
                "description": "The parameter to fix the privacy curve with."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "New measurement with the same function, but a fixed output measure and privacy map."
        }
    }
}
