{
    "make_cast": {
        "description": "Make a Transformation that casts a vector of data from type `TIA` to type `TOA`. \nFailure to parse results in None, else Some<TOA>.",
        "args": [
            {
                "name": "TIA",
                "is_type": true,
                "description": "atomic input data type to cast from"
            },
            {
                "name": "TOA",
                "is_type": true,
                "description": "atomic data type to cast into"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_cast_default": {
        "description": "Make a Transformation that casts a vector of data from type `TIA` to type `TOA`. If cast fails, fill with default.",
        "args": [
            {
                "name": "TIA",
                "is_type": true,
                "description": "atomic input data type to cast from"
            },
            {
                "name": "TOA",
                "is_type": true,
                "description": "atomic data type to cast into"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_is_equal": {
        "description": "Make a Transformation that checks if each element is equal to `value`.",
        "args": [
            {
                "name": "value",
                "c_type": "AnyObject *",
                "rust_type": "TIA",
                "description": "value to check against"
            },
            {
                "name": "TIA",
                "is_type": true,
                "description": "atomic input data type"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_is_null": {
        "description": "Make a Transformation that checks if each element in a vector is null.",
        "args": [
            {
                "name": "DIA",
                "is_type": true,
                "description": "atomic input domain"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_cast_inherent": {
        "description": "Make a Transformation that casts a vector of data from type `TI` to a type that can represent nullity `TO`. \nIf cast fails, fill with `TO`'s null value.",
        "args": [
            {
                "name": "TIA",
                "is_type": true,
                "description": "input data type to cast from"
            },
            {
                "name": "TOA",
                "is_type": true,
                "description": "data type to cast into"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_cast_metric": {
        "description": "Make a Transformation that converts the dataset metric from type `MI` to type `MO`.",
        "args": [
            {
                "name": "MI",
                "hint": "DatasetMetric",
                "is_type": true,
                "description": "input dataset metric"
            },
            {
                "name": "MO",
                "hint": "DatasetMetric",
                "is_type": true,
                "description": "output dataset metric"
            },
            {
                "name": "TA",
                "is_type": true,
                "description": "atomic type of data"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_clamp": {
        "description": "Make a Transformation that clamps numeric data in Vec<`T`> to `bounds`. \nIf datum is less than lower, let datum be lower. \nIf datum is greater than upper, let datum be upper.",
        "args": [
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["TA", "TA"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of inclusive lower and upper bounds."
            },
            {
                "name": "TA",
                "is_type": true,
                "description": "atomic data type",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_unclamp": {
        "description": "Make a Transformation that unclamps a VectorDomain<BoundedDomain<T>> to a VectorDomain<AllDomain<T>>.",
        "args": [
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["TA", "TA"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of inclusive lower and upper bounds."
            },
            {
                "name": "TA",
                "is_type": true,
                "description": "atomic data type",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_count": {
        "description": "Make a Transformation that computes a count of the number of records in data.",
        "args": [
            {
                "name": "TIA",
                "is_type": true,
                "description": "Atomic Input Type. Input data is expected to be of the form Vec<TIA>."
            },
            {
                "name": "TO",
                "default": "i32",
                "is_type": true,
                "description": "Output Type. Must be an integer."
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_count_distinct": {
        "description": "Make a Transformation that computes a count of the number of unique, distinct records in data.",
        "args": [
            {
                "name": "TIA",
                "is_type": true,
                "description": "Atomic Input Type. Input data is expected to be of the form Vec<TIA>."
            },
            {
                "name": "TO",
                "default": "i32",
                "is_type": true,
                "description": "Output Type. Must be an integer."
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_count_by": {
        "description": "Make a Transformation that computes the count of each unique value in data. \nThis assumes that the category set is unknown. \nThis uses a restricted-sensitivity proof that takes advantage of known dataset size. \nUse `make_resize` to establish dataset size.\nUse meas.make_base_stability to release this query.",
        "args": [
            {
                "name": "size",
                "c_type": "unsigned int",
                "description": "Number of records in input data."
            },
            {
                "name": "MO",
                "hint": "SensitivityMetric",
                "is_type": true,
                "description": "Output Metric."
            },
            {
                "name": "TIA",
                "is_type": true,
                "description": "Atomic Input Type. Categorical/hashable input data type. Input data must be Vec<TI>."
            },
            {
                "name": "TOA",
                "is_type": true,
                "description": "Atomic Output Type. Express counts in terms of this integral type.",
                "default": "i32"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>",
            "description": "The carrier type is HashMap<TI, TO>- the counts for each unique data input."
        }
    },
    "make_count_by_categories": {
        "description": "Make a Transformation that computes the number of times each category appears in the data. \nThis assumes that the category set is known.",
        "args": [
            {
                "name": "categories",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Vec",
                    "args": ["TIA"]
                },
                "description": "The set of categories to compute counts for."
            },
            {
                "name": "MO",
                "default": "L1Distance<i32>",
                "hint": "SensitivityMetric",
                "is_type": true,
                "description": "output sensitivity metric"
            },
            {
                "name": "TIA",
                "is_type": true,
                "description": "categorical/hashable input type. Input data must be Vec<TIA>."
            },
            {
                "name": "TOA",
                "is_type": true,
                "description": "express counts in terms of this integral type",
                "default": "i32"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_split_lines": {
        "description": "Make a Transformation that takes a string and splits it into a Vec<String> of its lines.",
        "args": [],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_split_records": {
        "description": "Make a Transformation that splits each record in a Vec<String> into a Vec<Vec<String>>.",
        "args": [
            {
                "name": "separator",
                "c_type": "const char *",
                "description": "The token(s) that separate entries in each record."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>"
        }
    },
    "make_create_dataframe": {
        "description": "Make a Transformation that constructs a dataframe from a Vec<Vec<String>>.",
        "args": [
            {
                "name": "col_names",
                "rust_type": {
                    "origin": "Vec",
                    "args": ["K"]
                },
                "c_type": "AnyObject *",
                "description": "Column names for each record entry."
            },
            {
                "name": "K",
                "is_type": true,
                "description": "categorical/hashable data type of column names"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_split_dataframe": {
        "description": "Make a Transformation that splits each record in a String into a Vec<Vec<String>>,\nand loads the resulting table into a dataframe keyed by `col_names`.",
        "args": [
            {
                "name": "separator",
                "c_type": "const char *",
                "description": "The token(s) that separate entries in each record."
            },
            {
                "name": "col_names",
                "rust_type": {
                    "origin": "Vec",
                    "args": ["K"]
                },
                "c_type": "AnyObject *",
                "description": "Column names for each record entry."
            },
            {
                "name": "K",
                "is_type": true,
                "description": "categorical/hashable data type of column names"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>"
        }
    },
    "make_select_column": {
        "description": "Make a Transformation that retrieves the column `key` from a dataframe as Vec<`TOA`>.",
        "args": [
            {
                "name": "key",
                "c_type": "AnyObject *",
                "rust_type": "K",
                "description": "categorical/hashable data type of the key/column name"
            },
            {
                "name": "K",
                "is_type": true,
                "description": "data type of the key"
            },
            {
                "name": "TOA",
                "is_type": true,
                "description": "atomic data type to downcast to"
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_identity": {
        "description": "Make a Transformation that simply passes the data through.",
        "args": [
            {
                "name": "D",
                "description": "Domain of the identity function. Must be VectorDomain<AllDomain<_>> or AllDomain<_>",
                "is_type": true
            },
            {
                "name": "M",
                "description": "metric. Must be a dataset metric if D is a VectorDomain or a sensitivity metric if D is an AllDomain",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>",
            "description": "A transformation where the input and output domain are D and the input and output metric are M"
        }
    },
    "make_impute_constant": {
        "description": "Make a Transformation that replaces null/None data with `constant`.\nBy default, the input type is Vec<Option<TA>>, as emitted by make_cast. \nSet `DA` to InherentNullDomain<AllDomain<TA>> for imputing on types that have an inherent representation of nullity, like floats.",
        "args": [
            {
                "name": "constant",
                "c_type": "AnyObject *",
                "rust_type": "TA",
                "description": "Value to replace nulls with."
            },
            {
                "name": "DA",
                "is_type": true,
                "default": "OptionNullDomain<AllDomain<TA>>",
                "generics": ["TA"],
                "description": "domain of data being imputed. This is OptionNullDomain<AllDomain<TA>> or InherentNullDomain<AllDomain<TA>>"
            }
        ],
        "derived_types": [
            {
                "name": "TA",
                "rust_type": {
                    "function": "get_domain_atom_or_infer",
                    "params": [
                        "DA", "constant"
                    ]
                }
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_impute_uniform_float": {
        "description": "Make a Transformation that replaces null/None data in Vec<`TA`> with uniformly distributed floats within `bounds`.",
        "args": [
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["TA", "TA"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of inclusive lower and upper bounds."
            },
            {
                "name": "TA",
                "is_type": true,
                "description": "type of data being imputed",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {"c_type": "FfiResult<AnyTransformation *>"}
    },
    "make_sized_bounded_mean": {
        "description": "Make a Transformation that computes the mean of bounded data. \nThis uses a restricted-sensitivity proof that takes advantage of known dataset size. \nUse `make_clamp` to bound data and `make_bounded_resize` to establish dataset size.",
        "args": [
            {
                "name": "size",
                "c_type": "unsigned int",
                "description": "Number of records in input data."
            },
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["T", "T"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of inclusive lower and upper bounds of the input data."
            },
            {
                "name": "T",
                "is_type": true,
                "description": "atomic data type",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>"
        }
    },
    "make_resize": {
        "description": "Make a Transformation that either truncates or imputes records with `constant` in a Vec<`TA`> to match a provided `size`.",
        "args": [
            {
                "name": "size",
                "c_type": "unsigned int",
                "description": "Number of records in output data."
            },
            {
                "name": "constant",
                "c_type": "AnyObject *",
                "rust_type": "TA",
                "description": "Value to impute with."
            },
            {
                "name": "TA",
                "is_type": true,
                "description": "Atomic type."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>",
            "description": "A vector of the same type `TA`, but with the provided `size`."
        }
    },
    "make_bounded_resize": {
        "description": "Make a Transformation that either truncates or imputes records with `constant` in a Vec<`TA`> to match a provided `size`.",
        "args": [
            {
                "name": "size",
                "c_type": "unsigned int",
                "description": "Number of records in output data."
            },
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["TA", "TA"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of lower and upper bounds for data in the input domain"
            },
            {
                "name": "constant",
                "c_type": "void *",
                "rust_type": "TA",
                "description": "Value to impute with."
            },
            {
                "name": "TA",
                "is_type": true,
                "description": "Atomic type. If not passed, TA is inferred from the lower bound.",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>",
            "description": "A vector of the same type `TA`, but with the provided `size`."
        }
    },
    "make_bounded_sum": {
        "description": "Make a Transformation that computes the sum of bounded data. \nUse `make_clamp` to bound data.",
        "args": [
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["T", "T"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of lower and upper bounds for data in the input domain"
            },
            {
                "name": "T",
                "is_type": true,
                "description": "atomic type of data",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>"
        }
    },
    "make_sized_bounded_sum": {
        "description": "Make a Transformation that computes the sum of bounded data with known dataset size. \nThis uses a restricted-sensitivity proof that takes advantage of known dataset size for better utility. \nUse `make_clamp` to bound data and `make_bounded_resize` to establish dataset size.",
        "args": [
            {
                "name": "size",
                "c_type": "unsigned int",
                "description": "Number of records in input data."
            },
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["T", "T"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of lower and upper bounds for input data"
            },
            {
                "name": "T",
                "is_type": true,
                "description": "atomic type of data",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>"
        }
    },
    "make_sized_bounded_variance": {
        "description": "Make a Transformation that computes the variance of bounded data. \nThis uses a restricted-sensitivity proof that takes advantage of known dataset size. \nUse `make_clamp` to bound data and `make_bounded_resize` to establish dataset size.",
        "args": [
            {
                "name": "size",
                "c_type": "unsigned int",
                "description": "Number of records in input data."
            },
            {
                "name": "bounds",
                "c_type": "AnyObject *",
                "rust_type": {
                    "origin": "Tuple",
                    "args": ["T", "T"]
                },
                "hint": "Tuple[Any, Any]",
                "description": "Tuple of lower and upper bounds for input data"
            },
            {
                "name": "ddof",
                "c_type": "unsigned int",
                "default": 1,
                "description": "Delta degrees of freedom. Set to 0 if not a sample, 1 for sample estimate."
            },
            {
                "name": "T",
                "is_type": true,
                "description": "atomic data type",
                "example": {
                    "function": "get_first",
                    "params": ["bounds"]
                }
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>"
        }
    }
}
