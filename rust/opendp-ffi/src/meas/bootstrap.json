{
    "make_base_laplace": {
        "description": "Make a Measurement that adds noise from the laplace(`scale`) distribution to a scalar value.\nAdjust D to noise vector-valued data.",
        "proof": "https://www.overleaf.com/read/brvrprjhrhwb",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Noise scale parameter of the laplace distribution."
            },
            {
                "name": "D",
                "c_type": "char *",
                "default": "AllDomain<T>",
                "generics": ["T"],
                "description": "Domain of the data type to be privatized. Valid values are VectorDomain<AllDomain<T>> or AllDomain<T>",
                "is_type": true
            }
        ],
        "derived_types": [
            {
                "name": "T",
                "rust_type": {
                    "function": "get_domain_atom_or_infer",
                    "params": [
                        "D", "scale"
                    ]
                }
            }
        ],
        "ret": {"c_type": "FfiResult<AnyMeasurement *>"}
    },
    "make_base_gaussian": {
        "description": "Make a Measurement that adds noise from the gaussian(`scale`) distribution to the input.\nAdjust D to noise vector-valued data.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "T",
                "description": "noise scale parameter to the gaussian distribution"
            },
            {
                "name": "D",
                "c_type": "char *",
                "default": "AllDomain<T>",
                "generics": ["T"],
                "description": "Domain of the data type to be privatized. Valid values are VectorDomain<AllDomain<T>> or AllDomain<T>",
                "is_type": true
            }
        ],
        "derived_types": [
            {
                "name": "T",
                "rust_type": {
                    "function": "get_domain_atom_or_infer",
                    "params": [
                        "D", "scale"
                    ]
                }
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_geometric": {
        "description": "Make a Measurement that adds noise from the geometric(`scale`) distribution to the input.\nAdjust D to noise vector-valued data.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "QO",
                "description": "noise scale parameter to the geometric distribution"
            },
            {
                "name": "D",
                "c_type": "char *",
                "default": "AllDomain<i32>",
                "description": "Domain of the data type to be privatized. Valid values are VectorDomain<AllDomain<T>> or AllDomain<T>",
                "is_type": true
            },
            {
                "name": "QO",
                "c_type": "char *",
                "description": "Data type of the sensitivity, scale, and budget.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_stability": {
        "description": "Make a Measurement that implements a stability-based filtering and noising.",
        "args": [
            {
                "name": "n",
                "c_type": "unsigned int",
                "description": "Number of records in the input vector."
            },
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": {"root": "MI", "index": 0},
                "description": "Noise scale parameter."
            },
            {
                "name": "threshold",
                "c_type": "void *",
                "rust_type": {"root": "MI", "index": 0},
                "description": "Exclude counts that are less than this minimum value."
            },
            {
                "name": "MI",
                "c_type": "char *",
                "description": "Input metric.",
                "is_type": true,
                "hint": "SensitivityMetric"
            },
            {
                "name": "TIK",
                "c_type": "char *",
                "description": "Data type of input key- must be hashable/categorical.",
                "is_type": true
            },
            {
                "name": "TIC",
                "c_type": "char *",
                "description": "Data type of input count- must be integral.",
                "is_type": true,
                "default": "i32"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    }
}
