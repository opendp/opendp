name: Release
on:
  release:
    types:
      - published
env:
  FEATURES: untrusted


jobs:
  credential-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is an administrator
        uses: lannonbr/repo-permission-check-action@2.0.0
        with:
          permission: admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Assert version
        run: |
          pip install toml
          python tools/assert_version.py


  python-pre-publish-windows:
    runs-on: windows-latest
    needs: credential-check
    env:
      MSYS: winsymlinks:nativestrict
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          install: git mingw-w64-x86_64-toolchain openssl-devel m4 vim diffutils make

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Rust build for windows
        run: sh tools/rust_build.sh -p windows -i -r -f "$FEATURES"

      - name: Upload .dll
        uses: actions/upload-artifact@v2
        with:
          name: lib_dll
          path: rust/target/x86_64-pc-windows-gnu/release/opendp_ffi.dll


  python-pre-publish-mac:
    runs-on: macos-10.15
    needs: credential-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Rust build for macos
        run: sh tools/rust_build.sh -p macos -i -r -f "$FEATURES"

      - name: Upload .dylib
        uses: actions/upload-artifact@v2
        with:
          name: lib_dylib
          path: rust/target/release/libopendp_ffi.dylib


  python-pre-publish-linux:
    runs-on: ubuntu-20.04
    needs: credential-check
    env:
      DOCKER_IMAGE: quay.io/pypa/manylinux2010_x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Rust build for linux
        run: docker run --rm -v `pwd`:/io $DOCKER_IMAGE cd /io && sh tools/rust_build.sh -p linux -i -r -f "$FEATURES"

      - name: Upload .so
        uses: actions/upload-artifact@v2
        with:
          name: lib_so
          path: rust/target/release/libopendp_ffi.so


  python-publish:
    runs-on: ubuntu-20.04
    needs: [ python-pre-publish-windows, python-pre-publish-mac, python-pre-publish-linux ]
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Prepare for libs
        run: mkdir -p rust/target/x86_64-pc-windows-gnu/release rust/target/release

      - name: Download windows lib
        uses: actions/download-artifact@v2
        with:
          name: lib_dll
          path: rust/target/x86_64-pc-windows-gnu/release

      - name: Download macos lib
        uses: actions/download-artifact@v2
        with:
          name: lib_dylib
          path: rust/target/release

      - name: Download linux lib
        uses: actions/download-artifact@v2
        with:
          name: lib_so
          path: rust/target/release

      - name: Publish python package
        run: python tools/publish_tool.py python


  rust-publish:
    runs-on: ubuntu-20.04
    needs: credential-check
    env:
      CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Publish rust crate
        run: python tools/publish_tool.py rust
