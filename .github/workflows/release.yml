name: Release
on:
  release:
    types:
      - published
env:
  FEATURES: untrusted


jobs:
  credential-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is an administrator
        uses: lannonbr/repo-permission-check-action@2.0.0
        with:
          permission: admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Assert version
        run: |
          pip install toml
          python tools/assert_version.py


  python-pre-publish-windows:
    runs-on: windows-latest
    needs: credential-check
    env:
      MSYS: winsymlinks:nativestrict
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: m4

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Rust dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~\.cargo\bin
            ~\.cargo\registry\index
            ~\.cargo\registry\cache
            ~\.cargo\git\db
            ~\AppData\Local\gmp-mpfr-sys
            rust\target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/*/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for windows
        run: bash tools/rust_build.sh -i -r -t -f "$FEATURES"

      - name: Upload .dll
        uses: actions/upload-artifact@v2
        with:
          name: lib_dll
          path: rust/target/release/opendp_ffi.dll


  python-pre-publish-mac:
    runs-on: macos-10.15
    needs: credential-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Rust dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/Library/Caches/gmp-mpfr-sys
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/*/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for macos
        run: bash tools/rust_build.sh -i -r -t -f "$FEATURES"

      - name: Upload .dylib
        uses: actions/upload-artifact@v2
        with:
          name: lib_dylib
          path: rust/target/release/libopendp_ffi.dylib


  python-pre-publish-linux:
    runs-on: ubuntu-20.04
    needs: credential-check
    env:
      DOCKER_IMAGE: quay.io/pypa/manylinux2010_x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Rust dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cache/gmp-mpfr-sys
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/*/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for linux
        run: docker run --rm -v `pwd`:/io $DOCKER_IMAGE bash -c "cd /io && bash tools/rust_build.sh -i -r -t -f \"$FEATURES\""

      - name: Upload .so
        uses: actions/upload-artifact@v2
        with:
          name: lib_so
          path: rust/target/release/libopendp_ffi.so


  python-publish:
    runs-on: ubuntu-20.04
    needs: [ python-pre-publish-windows, python-pre-publish-mac, python-pre-publish-linux ]
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Prepare for libs
        run: mkdir -p rust/target/x86_64-pc-windows-gnu/release rust/target/release

      - name: Download windows lib
        uses: actions/download-artifact@v2
        with:
          name: lib_dll
          path: rust/target/x86_64-pc-windows-gnu/release

      - name: Download macos lib
        uses: actions/download-artifact@v2
        with:
          name: lib_dylib
          path: rust/target/release

      - name: Download linux lib
        uses: actions/download-artifact@v2
        with:
          name: lib_so
          path: rust/target/release

      - name: Publish Python package
        run: python tools/publish_tool.py python -n


  rust-publish:
    runs-on: ubuntu-20.04
    needs: credential-check
    env:
      CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Publish Rust crate
        run: python tools/publish_tool.py rust -n
