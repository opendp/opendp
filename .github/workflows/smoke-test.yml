name: Smoke Test

on: [push, pull_request]

jobs:
#  rust-build-and-test:
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: rust
#    env:
#      CARGO_TERM_COLOR: always
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Cache Rust dependencies
#        uses: actions/cache@v2
#        with:
#          path: |
#            ~/.cargo/registry
#            ~/.cargo/git
#            rust/target
#          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/*/Cargo.toml') }}
#          restore-keys: ${{ runner.os }}-cargo-
#
#      - name: Build
#        run: cargo build --verbose
#
#      - name: Test
#        run: cargo test --verbose
#
#      - name: Upload libs
#        uses: actions/upload-artifact@v2
#        with:
#          name: libs
#          path: rust/target/debug/libopendp_ffi.so
#
#  python-test:
#    needs: rust-build-and-test
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: python
#    strategy:
#      matrix:
#        python-version: [3.6]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Get pip cache dir
#        id: pip-cache
#        run: echo "::set-output name=dir::$(pip cache dir)"
#
#      - name: Cache pip dependencies
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.pip-cache.outputs.dir }}
#          key: ${{ runner.os }}-pip-${{ hashFiles('python/setup.cfg') }}
#          restore-keys: ${{ runner.os }}-pip-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install flake8 pytest
#
#      - name: Lint with flake8
#        run: |
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#
#      - name: Prepare for libs
#        run: mkdir -p src/opendp/v1/lib
#
#      - name: Download libs
#        uses: actions/download-artifact@v2
#        with:
#          name: libs
#          path: python/src/opendp/v1/lib
#
#      - name: Install package
#        run: python -m pip install -e .
#
#      - name: Test
#        run: pytest -v

  python-pre-publish-windows:
#    needs: python-test
    runs-on: windows-latest
    env:
      MSYS: winsymlinks:nativestrict
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: msys2/setup-msys2@v2

      - name: Install dependencies
        run: |
          # rustup self uninstall -y
          # choco install rust
          rustup toolchain install stable-x86_64-pc-windows-gnu
          rustup default stable-x86_64-pc-windows-gnu
          choco install 7zip
          choco install curl

      - name: Checkout patch repository
        uses: actions/checkout@v2
        with:
          repository: opendp/opendp-windows
          path: opendp-windows

      - name: Install dependencies
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm git mingw-w64-x86_64-toolchain openssl-devel m4 vim diffutils make
          cp -f /mingw64/x86_64-w64-mingw32/lib/{*.a,*.o} `rustc --print sysroot`/lib/rustlib/x86_64-pc-windows-gnu/lib

      - name: Prepare OpenDP Patch
        run: |
          chmod +x opendp-windows/patch_opendp.sh
          (cd opendp-windows && bash patch_opendp.sh)

      - name: Patch OpenDP
        shell: msys2 -leo pipefail {0}
        run: |
          chmod +x opendp-windows/patch_opendp_msys.sh
          (cd opendp-windows && bash patch_opendp_msys.sh)

      - name: Build windows binaries
        run: cargo +stable build --verbose --release --manifest-path=rust/Cargo.toml

      - name: Upload .dll
        uses: actions/upload-artifact@v2
        with:
          name: lib_dll
          path: rust/target/release/opendp_ffi.dll

#
#
#  python-pre-publish-mac:
#    needs: python-test
#    runs-on: macos-10.15
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Build mac binaries
#        run: cargo +stable build --verbose --release --manifest-path=rust/Cargo.toml
#
#      - name: Upload .dylib
#        uses: actions/upload-artifact@v2
#        with:
#          name: lib_dylib
#          path: rust/target/release/libopendp_ffi.dylib
#
#
#  python-pre-publish-linux:
#    needs: python-test
#    runs-on: ubuntu-20.04
#    env:
#      DOCKER_IMAGE: quay.io/pypa/manylinux2010_x86_64
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Build manylinux binaries
#        run: |
#          chmod +x .github/build_manylinux_binaries.sh
#          docker run --rm -v `pwd`:/io $DOCKER_IMAGE /io/.github/build_manylinux_binaries.sh
#
#      - name: Upload .so
#        uses: actions/upload-artifact@v2
#        with:
#          name: lib_so
#          path: rust/target/release/libopendp_ffi.so
#
#
#  python-publish:
#    needs: [python-pre-publish-mac, python-pre-publish-linux]
#    runs-on: ubuntu-20.04
#    env:
#      TWINE_USERNAME: ${{ secrets.PYPI_API_TOKEN }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.6
#
#      - name: Prepare for libs
#        run: mkdir -p python/src/opendp/v1/lib
#
#      - name: Download mac lib
#        uses: actions/download-artifact@v2
#        with:
#          name: lib_dylib
#          path: python/src/opendp/v1/lib
#
#      - name: Download linux lib
#        uses: actions/download-artifact@v2
#        with:
#          name: lib_so
#          path: python/src/opendp/v1/lib
#
#      - name: Download windows lib
#        uses: actions/download-artifact@v2
#        with:
#          name: lib_dll
#          path: python/src/opendp/v1/lib
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install twine wheel
#
#      - name: Build bdist
#        run: |
#          python3 python/setup.py bdist_wheel -d python/wheelhouse
#
#      - name: PyPi OpenDP upload
#        run: |
#          python3 -m twine upload --repository testpypi --verbose --skip-existing python/wheelhouse/*
#
#  rust-publish:
#    needs: rust-build-and-test
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: rust
#    env:
#      CARGO_TERM_COLOR: always
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Publish Cargo OpenDP
#        run: cargo publish --verbose --manifest-path=opendp/Cargo.toml --dry-run
#
#      - name: Publish Cargo OpenDP-FFI
#        run: cargo publish --verbose --manifest-path=opendp-ffi/Cargo.toml --dry-run
