# Creates a build for a channel:
# * Compiles for all platforms, uploads to the lib artifact
# * Creates Python and R bindings, uploads to the python_bindings and r_bindings artifacts
# * Downloads the lib and python_bindings artifacts, creates a Python wheel, uploads to the python_wheel artifact
# * Downloads the lib and r_bindings artifacts, creates an R package, uploads to the r_package artifact
#
# INPUTS
# * channel:  The release channel
# * fake:     Whether to do a fake build (to save time, for testing only)
name: Build Channel
on:
  workflow_call:
    inputs:
      channel:
        type: string
        required: true
      fake:
        type: boolean
        required: false
        default: false
  workflow_dispatch:
    inputs:
      channel:
        description: Target Channel
        type: choice
        options:
          - dev
          - nightly
          - beta
          - stable
        required: true
        default: nightly
      fake:
        description: Fake Build?
        type: boolean
        required: false
        default: false
env:
  FEATURES: untrusted,ffi

jobs:
  credential-check:
    uses: ./.github/workflows/credential-check.yml
    with:
      ref: ${{ inputs.channel }}
      assert_version: ${{ inputs.channel != 'dev' }}

  libs-windows:
    needs: credential-check
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: m4

      - name: Checkout repository
        if: ${{ !inputs.fake }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        if: ${{ !inputs.fake }}
        uses: actions/cache@v3
        with:
          path: |
            ~\.cargo\bin
            ~\.cargo\registry\index
            ~\.cargo\registry\cache
            ~\.cargo\git\db
            rust\target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for windows
        if: ${{ !inputs.fake }}
        run: bash tools/rust_build.sh -i -r -t -f "$FEATURES"

      - name: Create Rust build for windows (FAKE)
        if: ${{ inputs.fake }}
        run: |
          mkdir -p rust/target/release/
          echo windows > rust/target/release/opendp.dll
          echo windows > rust/target/release/libopendp.a

      - name: Upload .dll and .a
        uses: actions/upload-artifact@v3
        with:
          name: libs
          # Unnecessary '*' in path will cause artifact to include parent directories starting at that element.
          path: |
            rust/target*/release/opendp.dll
            rust/target*/release/libopendp.a

  libs-macos:
    needs: credential-check
    runs-on: macos-11
    strategy:
      matrix:
        architecture: [x86_64, aarch64]
    env:
      TARGET: ${{ matrix.architecture }}-apple-darwin
    steps:
      - name: Checkout repository
        if: ${{ !inputs.fake }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        if: ${{ !inputs.fake }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for macos
        if: ${{ !inputs.fake }}
        env:
          # Only run tests for native compile
          FLAGS: ${{ matrix.architecture == 'x86_64' && '-i -r -t' || '-i -r' }}
        run: bash tools/rust_build.sh $FLAGS -g $TARGET -f "$FEATURES"

      - name: Create Rust build for macos (FAKE)
        if: ${{ inputs.fake }}
        run: |
          mkdir -p rust/target/${{ env.TARGET }}/release/
          echo macos > rust/target/${{ env.TARGET }}/release/libopendp.dylib

      - name: Upload .dylib and .a
        uses: actions/upload-artifact@v3
        with:
          name: libs
          # Unnecessary '*' in path will cause artifact to include parent directories starting at that element.
          path: |
            rust/target*/${{ env.TARGET }}/release/libopendp.dylib
            rust/target*/${{ env.TARGET }}/release/libopendp.a

  libs-linux:
    needs: credential-check
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [x86_64, aarch64]
    env:
      DOCKER_IMAGE: messense/manylinux_2_24-cross:${{ matrix.architecture }}
      TARGET: ${{ matrix.architecture }}-unknown-linux-gnu
    steps:
      - name: Checkout repository
        if: ${{ !inputs.fake }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        if: ${{ !inputs.fake }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for linux
        if: ${{ !inputs.fake }}
        env:
          # Only run tests for native compile
          FLAGS: ${{ matrix.architecture == 'x86_64' && '-i -r -t' || '-i -r' }}
        run: docker run --rm -v `pwd`:/io $DOCKER_IMAGE bash -c "cd /io && bash tools/rust_build.sh $FLAGS -g $TARGET -f \"$FEATURES\""

      - name: Create Rust build for linux (FAKE)
        if: ${{ inputs.fake }}
        run: |
          mkdir -p rust/target/${{ env.TARGET }}/release/
          echo linux > rust/target/${{ env.TARGET }}/release/libopendp.so
          echo linux > rust/target/${{ env.TARGET }}/release/libopendp.a
          echo fake > R/opendp/src/vendor.tar.xz

      - name: Upload .so and .a
        uses: actions/upload-artifact@v3
        with:
          name: libs
          # Unnecessary '*' in path will cause artifact to include parent directories starting at that element.
          path: |
            rust/target*/${{ env.TARGET }}/release/libopendp.so
            rust/target*/${{ env.TARGET }}/release/libopendp.a


  bindings:
    needs: credential-check
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        if: ${{ !inputs.fake }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create bindings
        if: ${{ !inputs.fake }}
        run: bash tools/rust_build.sh -r -n -f "$FEATURES,bindings"

      - name: Upload Python bindings
        uses: actions/upload-artifact@v3
        with:
          name: python_bindings
          path: python/src/opendp/
  
      - name: Prepare vendored sources
        if: ${{ !inputs.fake }}
        run: bash tools/r_stage.sh -v
  
      - name: Upload R bindings
        uses: actions/upload-artifact@v3
        with:
          name: r_bindings
          path: R/opendp/


  python:
    needs: [ libs-windows, libs-macos, libs-linux, bindings ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
          cache: pip

      - name: Download libs
        uses: actions/download-artifact@v3
        with:
          name: libs
          # Artifact contains all libs with leading paths starting at target
          path: rust/

      - name: Download Python bindings
        uses: actions/download-artifact@v3
        with:
          name: python_bindings
          path: python/src/opendp/

      - name: Create Python package
        run: bash tools/python_build.sh -i

      - name: Upload Python wheel
        uses: actions/upload-artifact@v3
        with:
          name: python_wheel
          path: python/wheelhouse/opendp-*-py3-none-any.whl

  r:
    needs: bindings
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          # overrides packages so that dependencies for package in cwd are not installed
          packages: rlang,RcppTOML
      
      - name: Download R bindings
        uses: actions/download-artifact@v3
        with:
          name: r_bindings
          path: R/opendp/

      - name: Source tar
        run: bash tools/r_stage.sh -s

      - name: Notes
        run: bash tools/r_stage.sh -n

      - name: Upload R package
        uses: actions/upload-artifact@v3
        with:
          name: r_package
          path: R/opendp/
