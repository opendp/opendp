linters: all_linters(
    # If "linters_with_defaults" is used then only these problems are reported:
    indentation_linter = NULL, # Indentation should be ... spaces but is ... spaces.
    line_length_linter = NULL, # Lines should not be more than 80 characters.
    object_length_linter = NULL, # Variable and function names should not be longer than 30 characters.
    object_name_linter = NULL, # Variable and function name style should match snake_case or symbols.
    # With "all_linters", these problems are also reported:
    condition_message_linter = NULL, # Don't use paste0 to build stop strings. Instead use the fact that these functions build condition message strings from their input (using "" as a separator). For translatable strings, prefer using gettextf().
    expect_identical_linter = NULL, # Use expect_identical(x, y) by default; resort to expect_equal() only when needed, e.g. when setting ignore_attr= or tolerance=.
    expect_s3_class_linter = NULL, # expect_s3_class(x, k) is better than expect_equal(class(x), k). Note also expect_s4_class() available for testing S4 objects.
    extraction_operator_linter = NULL, # Use `[[` instead of `$` to extract an element.
    implicit_integer_linter = NULL, # Integers should not be implicit. Use the form 1L for integers or 1.0 for doubles.
    keyword_quote_linter = NULL, # Only quote targets of assignment if necessary, i.e., if the name is not a valid R symbol (see ?make.names).
    numeric_leading_zero_linter = NULL, # Include the leading zero for fractional numeric constants.
    routine_registration_linter = NULL, # Register your native code routines with useDynLib and R_registerRoutines().
    todo_comment_linter = NULL, # TODO comments should be removed.
    undesirable_function_linter = NULL, # Function "library" is undesirable. As an alternative, use roxygen2's @importFrom statement in packages and `::` in scripts, instead of modifying the global search path.
    undesirable_operator_linter = NULL, # Operator `<<-` is undesirable. It assigns outside the current environment in a way that can be hard to reason about. Prefer fully-encapsulated functions wherever possible, or, if necessary, assign to a specific environment with assign(). Recall that you can create an environment at the desired scope with new.env().
    unnecessary_concatenation_linter = NULL, # Unneeded concatenation of a constant. Remove the "c" call.
    unnecessary_lambda_linter = NULL, # Pass rt_substitute directly as a symbol to lapply() instead of wrapping it in an unnecessary anonymous function.
    unnecessary_nested_if_linter = NULL, # Don't use nested `if` statements, where a single `if` with the combined conditional expression will do.
    unused_import_linter = NULL # Package 'testthat' is attached but never used.
    ) # Closing paren must be indented, and no closing comma above!
encoding: "UTF-8"
